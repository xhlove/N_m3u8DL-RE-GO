name: Build Go Project

on:
  push:
    branches:
      - "**"
  workflow_dispatch: # Allows manual triggering

env:
  APP_NAME: N_m3u8DL-RE-GO
  VERSION_TAG: v0.1.0

jobs:
  build-desktop:
    name: Build for ${{ matrix.goos }}/${{ matrix.goarch }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [windows, linux, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: darwin
            goarch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
      - name: Set up build variables
        id: vars
        run: |
          DATE=$(date -u -d '8 hours' +'%Y%m%d')
          SHA_SHORT=$(git rev-parse --short HEAD)
          FULL_NAME="${{ env.APP_NAME }}_${{ env.VERSION_TAG }}_${{ matrix.goos }}-${{ matrix.goarch }}_${DATE}_${SHA_SHORT}"
          FULL_EXE_NAME="${FULL_NAME}${{ matrix.goos == 'windows' && '.exe' || '' }}"
          ARCHIVE_NAME="${{ env.APP_NAME }}_${{ matrix.goos }}-${{ matrix.goarch }}"
          echo "full_exe_name=${FULL_EXE_NAME}" >> $GITHUB_OUTPUT
          echo "archive_name=${ARCHIVE_NAME}" >> $GITHUB_OUTPUT
      - name: Build application
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          go build -v -trimpath -o "dist/${{ steps.vars.outputs.full_exe_name }}" .
      - name: Package application
        id: package
        run: |
          cd dist
          if [ "${{ matrix.goos }}" == "windows" ]; then
            zip "${{ steps.vars.outputs.archive_name }}.zip" "${{ steps.vars.outputs.full_exe_name }}"
            echo "asset_path=${{ steps.vars.outputs.archive_name }}.zip" >> $GITHUB_OUTPUT
          else
            tar -czvf "${{ steps.vars.outputs.archive_name }}.tar.gz" "${{ steps.vars.outputs.full_exe_name }}"
            echo "asset_path=${{ steps.vars.outputs.archive_name }}.tar.gz" >> $GITHUB_OUTPUT
          fi
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.asset_path }}
          path: dist/${{ steps.package.outputs.asset_path }}
          retention-days: 7

  build-macos-arm64:
    name: Build for darwin/arm64
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
      - name: Set up build variables
        id: vars
        run: |
          DATE=$(date -u -v+8H +'%Y%m%d')
          SHA_SHORT=$(git rev-parse --short HEAD)
          FULL_NAME="${{ env.APP_NAME }}_${{ env.VERSION_TAG }}_darwin-arm64_${DATE}_${SHA_SHORT}"
          ARCHIVE_NAME="${{ env.APP_NAME }}_darwin-arm64"
          echo "full_exe_name=${FULL_NAME}" >> $GITHUB_OUTPUT
          echo "archive_name=${ARCHIVE_NAME}" >> $GITHUB_OUTPUT
      - name: Build application
        env:
          GOOS: darwin
          GOARCH: arm64
          CGO_ENABLED: 0
        run: |
          go build -v -trimpath -o "dist/${{ steps.vars.outputs.full_exe_name }}" .
      - name: Package application
        id: package
        run: |
          cd dist
          tar -czvf "${{ steps.vars.outputs.archive_name }}.tar.gz" "${{ steps.vars.outputs.full_exe_name }}"
          echo "asset_path=${{ steps.vars.outputs.archive_name }}.tar.gz" >> $GITHUB_OUTPUT
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.asset_path }}
          path: dist/${{ steps.package.outputs.asset_path }}
          retention-days: 7

  build-android:
    name: Build for android/${{ matrix.goarch }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goarch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
      - name: Set up Android NDK r25b
        run: |
          wget https://dl.google.com/android/repository/android-ndk-r25b-linux.zip -O ndk.zip
          unzip -q ndk.zip
          echo "NDK_HOME=$PWD/android-ndk-r25b" >> $GITHUB_ENV
      - name: Set up build variables
        id: vars
        run: |
          DATE=$(date -u -d '8 hours' +'%Y%m%d')
          SHA_SHORT=$(git rev-parse --short HEAD)
          FULL_NAME="${{ env.APP_NAME }}_${{ env.VERSION_TAG }}_android-${{ matrix.goarch }}_${DATE}_${SHA_SHORT}"
          ARCHIVE_NAME="${{ env.APP_NAME }}_android-${{ matrix.goarch }}"
          echo "full_exe_name=${FULL_NAME}" >> $GITHUB_OUTPUT
          echo "archive_name=${ARCHIVE_NAME}" >> $GITHUB_OUTPUT
          if [ "${{ matrix.goarch }}" == "arm64" ]; then
            TOOLCHAIN_PREFIX="aarch64-linux-android"
          else
            TOOLCHAIN_PREFIX="x86_64-linux-android"
          fi
          echo "CC=${NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/${TOOLCHAIN_PREFIX}29-clang" >> $GITHUB_ENV
          echo "CXX=${NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/${TOOLCHAIN_PREFIX}29-clang++" >> $GITHUB_ENV
      - name: Build application
        env:
          GOOS: android
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
        run: |
          go build -v -trimpath -ldflags "-w -s -extldflags '-Wl,--hash-style=sysv'" -o "dist/${{ steps.vars.outputs.full_exe_name }}" .
      - name: Package application
        id: package
        run: |
          cd dist
          tar -czvf "${{ steps.vars.outputs.archive_name }}.tar.gz" "${{ steps.vars.outputs.full_exe_name }}"
          echo "asset_path=${{ steps.vars.outputs.archive_name }}.tar.gz" >> $GITHUB_OUTPUT
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.asset_path }}
          path: dist/${{ steps.package.outputs.asset_path }}
          retention-days: 7