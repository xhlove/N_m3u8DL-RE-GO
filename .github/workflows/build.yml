name: Build Go Project

on:
  push:
    branches:
      - "**"
  workflow_dispatch: # Allows manual triggering

env:
  APP_NAME: N_m3u8DL-RE-GO
  VERSION_TAG: v0.1.0

jobs:
  build-desktop:
    name: Build for ${{ matrix.goos }}/${{ matrix.goarch }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [windows, linux, darwin]
        goarch: [amd64, arm64]
        exclude:
          # darwin/arm64 build requires macOS runner
          - goos: darwin
            goarch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Set up build variables
        id: vars
        run: |
          echo "date=$(date -u -d '8 hours' +'%Y%m%d')" >> $GITHUB_OUTPUT
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "exe_name=${{ env.APP_NAME }}${{ matrix.goos == 'windows' && '.exe' || '' }}" >> $GITHUB_OUTPUT

      - name: Build application
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          go build -v -trimpath -o "dist/${{ steps.vars.outputs.exe_name }}" .

      - name: Package application
        id: package
        run: |
          cd dist
          ASSET_NAME="${{ env.APP_NAME }}_${{ env.VERSION_TAG }}_${{ matrix.goos }}-${{ matrix.goarch }}_${{ steps.vars.outputs.date }}_${{ steps.vars.outputs.sha_short }}"
          if [ "${{ matrix.goos }}" == "windows" ]; then
            zip "${ASSET_NAME}.zip" "${{ steps.vars.outputs.exe_name }}"
            echo "asset_path=${ASSET_NAME}.zip" >> $GITHUB_OUTPUT
          else
            tar -czvf "${ASSET_NAME}.tar.gz" "${{ steps.vars.outputs.exe_name }}"
            echo "asset_path=${ASSET_NAME}.tar.gz" >> $GITHUB_OUTPUT
          fi
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.asset_path }}
          path: dist/${{ steps.package.outputs.asset_path }}
          retention-days: 7

  build-macos-arm64:
    name: Build for darwin/arm64
    runs-on: macos-latest # ARM64 build for macOS requires a macOS runner
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
      - name: Set up build variables
        id: vars
        run: |
          echo "date=$(date -u -d '8 hours' +'%Y%m%d')" >> $GITHUB_OUTPUT
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Build application
        env:
          GOOS: darwin
          GOARCH: arm64
          CGO_ENABLED: 0
        run: |
          go build -v -trimpath -o "dist/${{ env.APP_NAME }}" .
      - name: Package application
        id: package
        run: |
          cd dist
          ASSET_NAME="${{ env.APP_NAME }}_${{ env.VERSION_TAG }}_darwin-arm64_${{ steps.vars.outputs.date }}_${{ steps.vars.outputs.sha_short }}"
          tar -czvf "${ASSET_NAME}.tar.gz" "${{ env.APP_NAME }}"
          echo "asset_path=${ASSET_NAME}.tar.gz" >> $GITHUB_OUTPUT
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.asset_path }}
          path: dist/${{ steps.package.outputs.asset_path }}
          retention-days: 7

  build-android:
    name: Build for android/${{ matrix.goarch }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goarch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Set up Android NDK r25b
        id: setup-ndk
        run: |
          wget https://dl.google.com/android/repository/android-ndk-r25b-linux.zip -O ndk.zip
          unzip -q ndk.zip
          echo "ndk_path=$PWD/android-ndk-r25b" >> $GITHUB_OUTPUT

      - name: Set up build variables
        id: vars
        run: |
          echo "date=$(date -u -d '8 hours' +'%Y%m%d')" >> $GITHUB_OUTPUT
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          if [ "${{ matrix.goarch }}" == "arm64" ]; then
            echo "toolchain_prefix=aarch64-linux-android"
          else
            echo "toolchain_prefix=x86_64-linux-android"
          fi

      - name: Build application
        env:
          GOOS: android
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
          CC: ${{ steps.setup-ndk.outputs.ndk_path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ steps.vars.outputs.toolchain_prefix }}24-clang
          CXX: ${{ steps.setup-ndk.outputs.ndk_path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ steps.vars.outputs.toolchain_prefix }}24-clang++
        run: |
          go build -v -trimpath -o "dist/${{ env.APP_NAME }}" .

      - name: Package application
        id: package
        run: |
          cd dist
          ASSET_NAME="${{ env.APP_NAME }}_${{ env.VERSION_TAG }}_android-${{ matrix.goarch }}_${{ steps.vars.outputs.date }}_${{ steps.vars.outputs.sha_short }}"
          tar -czvf "${ASSET_NAME}.tar.gz" "${{ env.APP_NAME }}"
          echo "asset_path=${ASSET_NAME}.tar.gz" >> $GITHUB_OUTPUT

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.asset_path }}
          path: dist/${{ steps.package.outputs.asset_path }}
          retention-days: 7